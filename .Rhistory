lambda_1 <- exp(0:-10)
k_max <- 5
model <- cv_two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(dim(model$mse_full), c(k_max, length(lambda_1)))
model$mse
expect_equal(dim(model$mse), c(k_max, length(lambda_1)))
model$best_params
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- cv_two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(dim(model$mse), c(k_max, length(lambda_1)))
expect_equal(length(model$beta_min), p)
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
output <- out_to_beta(model$coef[[length(lambda_1)]], k_max, p)
expect_equal(dim(output), c(p, k_max))
expect_lte(sum(output[, 1] != 0), 2)
expect_lte(sum(output[, 2] != 0), 4)
expect_lte(sum(output[, 3] != 0), 6)
expect_lte(sum(output[, 4] != 0), 8)
expect_lte(sum(output[, 5] != 0), 10)
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
output <- out_to_beta(model$coef[[length(lambda_1)]], k_max, p)
expect_equal(dim(output), c(p, k_max))
expect_lte(sum(output[, 1] != 0), 2)
expect_lte(sum(output[, 2] != 0), 4)
expect_lte(sum(output[, 3] != 0), 6)
expect_lte(sum(output[, 4] != 0), 8)
expect_lte(sum(output[, 5] != 0), 10)
is.na(obj)
is.na(asdfadfdas)
is.na(list(1,2))
is.na(list(1,2,3,4))
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
output <- out_to_beta(model$coef[[length(lambda_1)]], k_max, p)
expect_equal(dim(output), c(p, k_max))
expect_lte(sum(output[, 1] != 0), 2)
expect_lte(sum(output[, 2] != 0), 4)
expect_lte(sum(output[, 3] != 0), 6)
expect_lte(sum(output[, 4] != 0), 8)
expect_lte(sum(output[, 5] != 0), 10)
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
output <- out_to_beta(model$coef[[length(lambda_1)]], k_max, p)
expect_equal(dim(output), c(p, k_max))
expect_lte(sum(output[, 1] != 0), 2)
expect_lte(sum(output[, 2] != 0), 4)
expect_lte(sum(output[, 3] != 0), 6)
expect_lte(sum(output[, 4] != 0), 8)
expect_lte(sum(output[, 5] != 0), 10)
load_all()
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
output <- out_to_beta(model$coef[[length(lambda_1)]], k_max, p)
expect_equal(dim(output), c(p, k_max))
expect_lte(sum(output[, 1] != 0), 2)
expect_lte(sum(output[, 2] != 0), 4)
expect_lte(sum(output[, 3] != 0), 6)
expect_lte(sum(output[, 4] != 0), 8)
expect_lte(sum(output[, 5] != 0), 10)
})
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
output <- out_to_beta(model$coef[[length(lambda_1)]], k_max, p)
expect_equal(dim(output), c(p, k_max))
expect_lte(sum(output[, 1] != 0), 2)
expect_lte(sum(output[, 2] != 0), 4)
expect_lte(sum(output[, 3] != 0), 6)
expect_lte(sum(output[, 4] != 0), 8)
expect_lte(sum(output[, 5] != 0), 10)
})
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
output <- out_to_beta(model$coef[[length(lambda_1)]], k_max, p)
expect_equal(dim(output), c(p, k_max))
expect_lte(sum(output[, 1] != 0), 2)
expect_lte(sum(output[, 2] != 0), 4)
expect_lte(sum(output[, 3] != 0), 6)
expect_lte(sum(output[, 4] != 0), 8)
expect_lte(sum(output[, 5] != 0), 10)
library(logratio)
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
model <- myfs(x,y, nsteps = 5)
thmat
nv = 5
thmat=matrix(NA,nv,nv)
thmat[row(thmat)>col(thmat)]=1:p
thmat=t(thmat)
thmat
? suppressWarnings
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
model <- myfs(x,y, nsteps = 5)
load_all()
load_all()
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
model <- myfs(x,y, nsteps = 5)
load_all()
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
model <- myfs(x,y, nsteps = 5)
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
model <- myfs(x,y, nsteps = 5)
load_all()
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
model <- myfs(x,y, nsteps = 5)
expect_equal(nrow(model$ind), 5)
expect_equal(length(model$beta[[5]]), 5)
expect_equal(length(model$rss), 5)
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- approximate_fs(x, y, k_max)
model$beta
model$ratios
model$intercept
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
prediction
predictions
predictions[1,]
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
predictions
x
expect_equal(dim(predictions), c(n, k))
expect_equal(predictions[1, ], c(16, 18))
expect_equal(predictions[2, ], c(16, 18))
predictions[2,]
predictions
fs_model$beta
x %*% fs_model$beta
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
predictions
predictions
load_all
load_all()
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
rep(fs_model$intercept, k)
load_all()
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
matrix(rep(fs_model$intercept, ncol(x)), nrow = ncol(x), byrow = TRUE)
}
matrix(rep(fs_model$intercept, ncol(x)), nrow = ncol(x), byrow = TRUE)
x %*% fs_model$beta
x
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
load_all()
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
predictions
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- cv.approximate_fs(x, y, k_max)
model$cvm
model$beta
model$model
load_all()
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- cv.approximate_fs(x, y, k_max)
model$beta
p
length(model$beta)
model$beta
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] - x[, 2]
y <- y - mean(y)
k_max <- 1
model <- cv.approximate_fs(x, y, k_max)
expect_equal(model$beta, c(1,-1, rep(0,p-2)))
model$beta
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] - x[, 2]
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 1
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(model$beta, c(1,-1, rep(0,p-2)))
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] - x[, 2]
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 1
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
model$selected_vars
model$coef
model$coef
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] - x[, 2]
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 1
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(model$coef[[length(lambda_1)]]$theta_vals[[1]], 1)
model$coef[[length(lambda_1)]]$theta_vals[[1]]
expect_equal(model$coef[[length(lambda_1)]]$theta_vals[[1]][1], 1)
model$coef[[length(lambda_1)]]$theta_vals[[1]][1]
expect_equal(model$coef[[length(lambda_1)]]$theta_vals[[1]], c("X" = 1))
model$coef
load_all()
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(model$lambda, lambda_1)
expect_equal(dim(model$selected_vars), c(p, length(lambda_1)))
expect_equal(nrow(model$coef[[length(lambda_1)]]$theta_ind), k_max)
load_all()
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(model$lambda, lambda_1)
expect_equal(dim(model$selected_vars), c(p, length(lambda_1)))
expect_equal(nrow(model$coef[[length(lambda_1)]]$theta_ind), k_max)
model$betas
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(model$lambda, lambda_1)
expect_equal(dim(model$selected_vars), c(p, length(lambda_1)))
expect_equal(nrow(model$coef[[length(lambda_1)]]$theta_ind), k_max)
expect_equal(length(model$betas), length(lambda_1))
expect_equal(dim(model$betas[[length(lambda_1)]]), c(p, k_max))
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- predict_two_stage(x, y, x,
k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
length(model$y_pred)
model$y_pred
load_all()
devtools::check(())
devtools::check()
coef
? stats
? lsfit
devtools::document()
? glment.constr
? glmnet.constr
? glmnet
devtools::document()
? glmnet.constr
devtools::document()
? glmnet.constr
devtools::document()
? glmnet.constr
devtools::document()
? glmnet.constr
devtools::document()
? glmnet.constr
devtools::document()
? cv.glmnet.constr
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
k_max <- 5
model <- approximate_fs(x, y, k_max)
expect_equal(dim(model$beta), c(p, k_max))
expect_equal(length(model$intercept), k_max)
model$theta
model$ratios
model$beta
model$ratios
devtools::document()
? approximate_fs
? cv.approximate_fs
? cv_approximate_fs
devtools:document()
devtools::document()
? glment.constr
? glmnet.constr
? cv.glmnet.constr
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
model <- glmnet.constr(x, y, family = "gaussian")
model$beta
dim(model$beta)
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
model$coef
devtools::document()
? two_stage
? glmnet
devtools::document()
? two_stage
devtools::document()
devtools::document()
devtools::document()
? cv.glmnet.constr
? cv.glmnet.constr
devtools::document()
? cv_two_stage
devtools::document()
? cv_two_stage
c
m <- matrix(c(1,0,.5,0,
0,1,0,.5,
.5,0,1,0.
0,.5,0,1), nrow = 4)
m <- matrix(c(1,0,.5,0,
0,1,0,.5,
.5,0,1,0.
0,.5,0,1), nrow = 4)
m <- matrix(c(1,0,.5,0,
0,1,0,.5,
.5,0,1,0,
0,.5,0,1), nrow = 4)
solve(m)
? zip
? rtools
library(logratio)
devtools::load_all()
set.seed(10)
n <- 100 #number of observations
p <- 20 #number of features
x <- abs(matrix(rnorm(n*p), nrow = n)) #positive raw features
w <- log(x) #logarithmically transformed features
y <- w[, 1] - w[, 2] + rnorm(n) #response
centered_w <- scale(w, center = TRUE, scale = FALSE)
centered_y <- y - mean(y)
model_fit <- glmnet.constr(centered_w, y, family = "gaussian")
centered_w <- scale(w, center = TRUE, scale = FALSE)
centered_y <- y - mean(y)
model_fit <- glmnet.constr(centered_w, y, family = "gaussian")
dim(model_fit$beta)
cv_model_fit <- cv.glmnet.constr(model_fit, x, y)
cv_model_fit$cvm #CV estimate of error
cv_model_fit$beta #best beta value
ts_model <- two_stage(centered_w, centered_y, k_max = 5)
