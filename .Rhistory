expect_equal(predictions[1, ], c(16, 18))
expect_equal(predictions[2, ], c(16, 18))
predictions[2,]
predictions
fs_model$beta
x %*% fs_model$beta
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
predictions
predictions
load_all
load_all()
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
rep(fs_model$intercept, k)
load_all()
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
matrix(rep(fs_model$intercept, ncol(x)), nrow = ncol(x), byrow = TRUE)
}
matrix(rep(fs_model$intercept, ncol(x)), nrow = ncol(x), byrow = TRUE)
x %*% fs_model$beta
x
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
load_all()
n <- 5
p <- 3
k <- 2
x <- matrix(2, n, p)
fs_model <- list(beta = matrix(1, p, k), intercept = c(10, 12))
predictions <- predict.approximate_fs(fs_model, x)
predictions
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- cv.approximate_fs(x, y, k_max)
model$cvm
model$beta
model$model
load_all()
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- cv.approximate_fs(x, y, k_max)
model$beta
p
length(model$beta)
model$beta
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] - x[, 2]
y <- y - mean(y)
k_max <- 1
model <- cv.approximate_fs(x, y, k_max)
expect_equal(model$beta, c(1,-1, rep(0,p-2)))
model$beta
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] - x[, 2]
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 1
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(model$beta, c(1,-1, rep(0,p-2)))
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] - x[, 2]
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 1
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
model$selected_vars
model$coef
model$coef
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] - x[, 2]
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 1
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(model$coef[[length(lambda_1)]]$theta_vals[[1]], 1)
model$coef[[length(lambda_1)]]$theta_vals[[1]]
expect_equal(model$coef[[length(lambda_1)]]$theta_vals[[1]][1], 1)
model$coef[[length(lambda_1)]]$theta_vals[[1]][1]
expect_equal(model$coef[[length(lambda_1)]]$theta_vals[[1]], c("X" = 1))
model$coef
load_all()
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(model$lambda, lambda_1)
expect_equal(dim(model$selected_vars), c(p, length(lambda_1)))
expect_equal(nrow(model$coef[[length(lambda_1)]]$theta_ind), k_max)
load_all()
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(model$lambda, lambda_1)
expect_equal(dim(model$selected_vars), c(p, length(lambda_1)))
expect_equal(nrow(model$coef[[length(lambda_1)]]$theta_ind), k_max)
model$betas
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
expect_equal(model$lambda, lambda_1)
expect_equal(dim(model$selected_vars), c(p, length(lambda_1)))
expect_equal(nrow(model$coef[[length(lambda_1)]]$theta_ind), k_max)
expect_equal(length(model$betas), length(lambda_1))
expect_equal(dim(model$betas[[length(lambda_1)]]), c(p, k_max))
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- predict_two_stage(x, y, x,
k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
length(model$y_pred)
model$y_pred
load_all()
devtools::check(())
devtools::check()
coef
? stats
? lsfit
devtools::document()
? glment.constr
? glmnet.constr
? glmnet
devtools::document()
? glmnet.constr
devtools::document()
? glmnet.constr
devtools::document()
? glmnet.constr
devtools::document()
? glmnet.constr
devtools::document()
? glmnet.constr
devtools::document()
? cv.glmnet.constr
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
k_max <- 5
model <- approximate_fs(x, y, k_max)
expect_equal(dim(model$beta), c(p, k_max))
expect_equal(length(model$intercept), k_max)
model$theta
model$ratios
model$beta
model$ratios
devtools::document()
? approximate_fs
? cv.approximate_fs
? cv_approximate_fs
devtools:document()
devtools::document()
? glment.constr
? glmnet.constr
? cv.glmnet.constr
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
model <- glmnet.constr(x, y, family = "gaussian")
model$beta
dim(model$beta)
set.seed(1)
n <- 100
p <- 30
x <- abs(matrix(rnorm(n*p),nrow = n))
y <- x[, 1] + x[, 2] + .1 * rnorm(n)
y <- y - mean(y)
lambda_1 <- exp(0:-10)
k_max <- 5
model <- two_stage(x, y, k_max = k_max, lambda_1 = lambda_1, second.stage = "y")
model$coef
devtools::document()
? two_stage
? glmnet
devtools::document()
? two_stage
devtools::document()
devtools::document()
devtools::document()
? cv.glmnet.constr
? cv.glmnet.constr
devtools::document()
? cv_two_stage
devtools::document()
? cv_two_stage
c
m <- matrix(c(1,0,.5,0,
0,1,0,.5,
.5,0,1,0.
0,.5,0,1), nrow = 4)
m <- matrix(c(1,0,.5,0,
0,1,0,.5,
.5,0,1,0.
0,.5,0,1), nrow = 4)
m <- matrix(c(1,0,.5,0,
0,1,0,.5,
.5,0,1,0,
0,.5,0,1), nrow = 4)
solve(m)
? zip
? rtools
library(logratio)
devtools::load_all()
set.seed(10)
n <- 100 #number of observations
p <- 20 #number of features
x <- abs(matrix(rnorm(n*p), nrow = n)) #positive raw features
w <- log(x) #logarithmically transformed features
y <- w[, 1] - w[, 2] + rnorm(n) #response
centered_w <- scale(w, center = TRUE, scale = FALSE)
centered_y <- y - mean(y)
model_fit <- glmnet.constr(centered_w, y, family = "gaussian")
centered_w <- scale(w, center = TRUE, scale = FALSE)
centered_y <- y - mean(y)
model_fit <- glmnet.constr(centered_w, y, family = "gaussian")
dim(model_fit$beta)
cv_model_fit <- cv.glmnet.constr(model_fit, x, y)
cv_model_fit$cvm #CV estimate of error
cv_model_fit$beta #best beta value
ts_model <- two_stage(centered_w, centered_y, k_max = 5)
devtools::load_all()
devtools::build()
devtools::build_vignettes()
library(logratiolasso)
devtools::load_all()
set.seed(10)
n <- 100 #number of observations
p <- 20 #number of features
x <- abs(matrix(rnorm(n*p), nrow = n)) #positive raw features
w <- log(x) #logarithmically transformed features
y <- w[, 1] - w[, 2] + rnorm(n) #response
centered_w <- scale(w, center = TRUE, scale = FALSE)
centered_y <- y - mean(y)
model_fit <- glmnet.constr(centered_w, y, family = "gaussian")
dim(model_fit$beta)
cv_model_fit <- cv.glmnet.constr(model_fit, centered_w, y)
cv_model_fit$cvm #CV estimate of error
cv_model_fit$beta #best beta value
ts_model <- two_stage(centered_w, centered_y, k_max = 5)
ts_model$betas[[50]]
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5)
cv_ts_model$lambda_min #index of best lambda
cv_ts_model$k_min #number of ratios
cv_ts_model$beta_min
cv_ts_model2 <- cv_two_stage(centered_w, centered_y, k_max = 5, second.stage = "yhat")
cv_ts_model2$beta_min
afs_model <- approximate_fs(w, y, k_max = 5)
afs_model$beta
afs_cv <- cv_approximate_fs(x, y, k_max = 5, n_folds = 10)
afs_cv$cvm
? install_github
devtools::build()
devtools::build()
devtools::build()
devtools::build()
? lm
? glmnet
glmnet
library(glmnet)
glmnet()
glmnet
devtools::build()
library(logratiolasso)
devtools::load_all()
set.seed(10)
n <- 100 #number of observations
p <- 20 #number of features
x <- abs(matrix(rnorm(n*p), nrow = n)) #positive raw features
w <- log(x) #logarithmically transformed features
y <- w[, 1] - w[, 2] + rnorm(n) #response
centered_w <- scale(w, center = TRUE, scale = FALSE)
centered_y <- y - mean(y)
model_fit <- glmnet.constr(centered_w, y, family = "gaussian")
dim(model_fit$beta)
dim(model_fit$beta)
cv_model_fit <- cv.glmnet.constr(model_fit, centered_w, y)
cv_model_fit$cvm #CV estimate of error
cv_model_fit$beta #best beta value
ts_model <- two_stage(centered_w, centered_y, k_max = 5)
ts_model$betas[[50]]
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5)
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5)
cv_ts_model$lambda_min #index of best lambda
cv_ts_model$k_min #number of ratios
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5)
cv_ts_model$lambda_min #index of best lambda
cv_ts_model$k_min #number of ratios
cv_ts_model$beta_min
afs_model <- approximate_fs(w, y, k_max = 5)
afs_model$beta
afs_cv <- cv_approximate_fs(x, y, k_max = 5, n_folds = 10)
afs_cv$cvm
? glmnet.constr
? glmnet
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5, dfmax = 20)
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5, dfmax = 10)
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5)
glmnet.constr()
? glmnet
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5, nlamba = 20)
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5, nlamba = 5)
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5, nlamba = 100)
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5, nlamba = 2)
t1 = Sys.time()
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5, nlamba = 2)
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5, nlamba = 100)
t2 = Sys.time()
t2 - t1
? glmnet.constr
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
? devtools:build
? devtools::build
? devtools::build(vignettes = FALSE)
devtools::build(vignettes = FALSE)
library(logratiolasso)
devtools::load_all()
set.seed(10)
n <- 100 #number of observations
p <- 20 #number of features
x <- abs(matrix(rnorm(n*p), nrow = n)) #positive raw features
w <- log(x) #logarithmically transformed features
y <- w[, 1] - w[, 2] + rnorm(n) #response
centered_w <- scale(w, center = TRUE, scale = FALSE)
centered_y <- y - mean(y)
model_fit <- glmnet.constr(centered_w, y, family = "gaussian")
dim(model_fit$beta)
cv_model_fit <- cv.glmnet.constr(model_fit, centered_w, y)
cv_model_fit$cvm #CV estimate of error
cv_model_fit$beta #best beta value
ts_model <- two_stage(centered_w, centered_y, k_max = 5)
ts_model <- two_stage(centered_w, centered_y, k_max = 5)
ts_model <- two_stage(centered_w, centered_y, k_max = 5, nlambda = 10)
#' @param ... Additional arguments to internally pass to the "glmnet" function.
#'
#' @return beta The resulting coefficient vectors in matrix form.
#' @example
#' n <- 100
#' p <- 30
#' x <- log(1 + abs(matrix(rnorm(n*p), nrow = n, ncol = p)))
#' y <- x[, 1] - x[, 2] + .1 * rnorm(n)
#' y <- y - mean(y)
#' fit1 <- glmnet.constr(x, y, family = "gaussian")
glmnet.constr=function(x,y,family = c("gaussian", "binomial"),alpha=1,nlambda=100,lambda.min.ratio=.01,lambda=NULL,...){
# glmnet with constraint sum beta=0
# Gaussian case: make sure y is centered.
# Binomial case: does not include an intercept
family = match.arg(family)
p=ncol(x)
n=length(y)
R=c(rep(1,p),rep(-1,p))
if(family=="gaussian"){
xx=rbind(cbind(x,-x),R)
yy=c(y,0)
w=c(rep(1,n),100*n)
w=w/sum(w)
if(!is.null(lambda)) {nlambda=NULL}
ggg=glmnet::glmnet(xx,yy,standardize=F,intercept=F,family=family,weights=w,lower.limits=rep(0,ncol(xx)+1),upper.limits=rep(Inf,ncol(xx)+1),alpha=alpha,nlambda=nlambda,lambda=lambda,lambda.min.ratio=lambda.min.ratio)
}
if(family=="binomial"){
#here we add two fake obs, one at y=0, one at y=1
xx=rbind(cbind(x,-x),R,R)
yy=c(y,0,1)
w=c(rep(1,n),n*100,n*100)
w=w/sum(w)
# I may want to include an intercept here, but having trouble getting sum b==0
ggg=glmnet::glmnet(xx,yy,standardize=F,intercept=F,family=family,weights=w,lower.limits=rep(0,ncol(xx)+1),upper.limits=rep(Inf,ncol(xx)+1),alpha=alpha,nlambda=nlambda,lambda.min.ratio=lambda.min.ratio,...)
}
b=ggg$beta[1:p,]-ggg$beta[-(1:p),]
return(list(beta=b,a0=ggg$a0,percvar=1-ggg$dev.ratio,lambda=ggg$lambda,glmnet.obj=ggg,family=family))
}
stage(centered_w, centered_y, k_max = 5, nlambda = 10)
ts_model <- two_stage(centered_w, centered_y, k_max = 5, nlambda = 10)
devtools::build(vignettes = FALSE)
library(logratiolasso)
devtools::load_all()
set.seed(10)
n <- 100 #number of observations
p <- 20 #number of features
x <- abs(matrix(rnorm(n*p), nrow = n)) #positive raw features
w <- log(x) #logarithmically transformed features
y <- w[, 1] - w[, 2] + rnorm(n) #response
centered_w <- scale(w, center = TRUE, scale = FALSE)
centered_y <- y - mean(y)
model_fit <- glmnet.constr(centered_w, y, family = "gaussian")
dim(model_fit$beta)
cv_model_fit <- cv.glmnet.constr(model_fit, centered_w, y)
cv_model_fit$cvm #CV estimate of error
cv_model_fit$beta #best beta value
ts_model <- two_stage(centered_w, centered_y, k_max = 5, nlambda = 10)
ts_model$betas[[50]]
ts_model <- two_stage(centered_w, centered_y, k_max = 5)
ts_model$betas[[10]]
t1 = Sys.time()
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5)
t2 = Sys.time()
t2 - t1
devtools::build(vignettes = FALSE)
devtools::build()
devtools::build(vignettes = FALSE)
devtools::build(vignettes = FALSE)
devtools::build(vignettes = FALSE)
library(logratiolasso)
devtools::load_all()
set.seed(10)
n <- 100 #number of observations
p <- 20 #number of features
x <- abs(matrix(rnorm(n*p), nrow = n)) #positive raw features
w <- log(x) #logarithmically transformed features
y <- w[, 1] - w[, 2] + rnorm(n) #response
centered_w <- scale(w, center = TRUE, scale = FALSE)
centered_y <- y - mean(y)
model_fit <- glmnet.constr(centered_w, y, family = "gaussian")
dim(model_fit$beta)
cv_model_fit <- cv.glmnet.constr(model_fit, centered_w, y)
cv_model_fit$cvm #CV estimate of error
cv_model_fit$beta #best beta value
ts_model <- two_stage(centered_w, centered_y, k_max = 5)
ts_model$betas[[10]]
cv_ts_model <- cv_two_stage(centered_w, centered_y, k_max = 5)
cv_ts_model$lambda_min #index of best lambda
cv_ts_model$k_min #number of ratios
cv_ts_model$beta_min
cv_ts_model2 <- cv_two_stage(centered_w, centered_y, k_max = 5, second.stage = "yhat")
cv_ts_model2$beta_min
afs_model <- approximate_fs(w, y, k_max = 5)
afs_model$beta
afs_cv <- cv_approximate_fs(x, y, k_max = 5, n_folds = 10)
afs_cv$cvm
devtools::build()
devtools::test()
devtools::test()
devtools::build_vignettes()
devtools::build()
? glmnet
devtools::build()
devtools::build()
devtools::build_vignettes()
